// Firestore security rules for MyChores app
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isUserAuthenticated(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Users collection - users can only access their own data
    match /users/{userId} {
      // Validate user data
      function isValidUser(user) {
        return user.size() > 0 &&
               user.name is string &&
               user.name.size() > 0 &&
               user.email is string &&
               user.email.size() > 0 &&
               (user.photoURL == null || user.photoURL is string) &&
               user.householdIds is list &&
               (user.fcmToken == null || user.fcmToken is string) &&
               user.createdAt is timestamp &&
               user.totalPoints is number &&
               user.weeklyPoints is number &&
               user.monthlyPoints is number &&
               (user.currentWeekStartDate == null || user.currentWeekStartDate is timestamp) &&
               (user.currentMonthStartDate == null || user.currentMonthStartDate is timestamp) &&
               user.earnedBadges is list;
      }
      
      allow read, delete: if isUserAuthenticated(userId);
      allow update: if isUserAuthenticated(userId) && isValidUser(request.resource.data);
      allow create: if isSignedIn() && isValidUser(request.resource.data);
    }
    
    // Top-level chores collection - access based on household membership
    match /chores/{choreId} {
      // Get household ID safely from either resource or request.resource
      function getHouseholdId(isCreate) {
        return isCreate ? request.resource.data.householdId : resource.data.householdId;
      }
      
      // Check if user is a member of the household this chore belongs to
      function isHouseholdMember(isCreate) {
        let householdId = getHouseholdId(isCreate);
        let household = get(/databases/$(database)/documents/households/$(householdId));
        return isSignedIn() && request.auth.uid in household.data.memberUserIds;
      }
      
      // Check if user is the owner of the household this chore belongs to
      function isHouseholdOwner(isCreate) {
        let householdId = getHouseholdId(isCreate);
        let household = get(/databases/$(database)/documents/households/$(householdId));
        return isSignedIn() && request.auth.uid == household.data.ownerUserId;
      }
      
      // Check if user is the creator of this chore
      function isCreator() {
        return isSignedIn() && request.auth.uid == resource.data.createdByUserId;
      }
      
      // Check if chore is assigned to the user
      function isAssignedToUser() {
        return isSignedIn() && request.auth.uid == resource.data.assignedToUserId;
      }
      
      // Validate chore data
      function isValidChore(chore) {
        return chore.size() > 0 &&
               chore.title is string && 
               chore.title.size() > 0 &&
               chore.description is string &&
               chore.householdId is string &&
               chore.householdId.size() > 0 &&
               (chore.assignedToUserId == null || chore.assignedToUserId is string) &&
               (chore.createdByUserId == null || chore.createdByUserId is string) &&
               (chore.dueDate == null || chore.dueDate is timestamp) &&
               chore.isCompleted is bool &&
               chore.createdAt is timestamp &&
               (chore.completedAt == null || chore.completedAt is timestamp) &&
               (chore.completedByUserId == null || chore.completedByUserId is string) &&
               chore.pointValue is number;
      }
      
      // Members can read chores in their household
      allow read: if isSignedIn() && isHouseholdMember(false);
      
      // Members can create chores in their household with validation
      allow create: if isSignedIn() && 
                     isHouseholdMember(true) && 
                     request.resource.data.createdByUserId == request.auth.uid;
      
      // Members can update chores in their household with validation
      allow update: if isSignedIn() && isHouseholdMember(false);
      
      // Delete allowed if: user is household owner, user created the chore, or chore is assigned to user
      allow delete: if isSignedIn() && (isHouseholdOwner(false) || isCreator() || isAssignedToUser());
    }
    
    // Households collection - access based on membership
    match /households/{householdId} {
      // Check if user is a member of this household
      function isMember() {
        return isSignedIn() && request.auth.uid in resource.data.memberUserIds;
      }
      
      // Check if user is the owner of this household
      function isOwner() {
        return isSignedIn() && request.auth.uid == resource.data.ownerUserId;
      }
      
      // Validate household data
      function isValidHousehold(household) {
        return household.size() > 0 &&
               household.name is string && 
               household.name.size() > 0 &&
               household.ownerUserId is string &&
               household.ownerUserId.size() > 0 &&
               household.memberUserIds is list &&
               household.memberUserIds.size() > 0 &&
               household.inviteCode is string &&
               household.inviteCode.size() > 0 &&
               household.createdAt is timestamp;
      }
      
      // Read: allow if user is a member or owner
      allow read: if isSignedIn() && (isMember() || isOwner());
      
      // Create: allow if user is setting themselves as owner and member
      allow create: if isSignedIn() && 
                     request.resource.data.ownerUserId == request.auth.uid && 
                     request.auth.uid in request.resource.data.memberUserIds &&
                     isValidHousehold(request.resource.data);
      
      // Update: allow if user is already a member and not changing ownership
      allow update: if isSignedIn() && 
                     isMember() && 
                     (resource.data.ownerUserId == request.resource.data.ownerUserId) &&
                     isValidHousehold(request.resource.data);
      
      // Delete: only the owner can delete a household
      allow delete: if isSignedIn() && isOwner();
      
      // Chores subcollection - this provides backward compatibility if we ever use subcollections
      match /chores/{choreId} {
        // Validate chore data
        function isValidSubcollectionChore(chore) {
          return chore.size() > 0 &&
                 chore.title is string && 
                 chore.title.size() > 0 &&
                 chore.description is string &&
                 (chore.assignedToUserId == null || chore.assignedToUserId is string) &&
                 (chore.createdByUserId == null || chore.createdByUserId is string) &&
                 (chore.dueDate == null || chore.dueDate is timestamp) &&
                 chore.isCompleted is bool &&
                 chore.createdAt is timestamp &&
                 (chore.completedAt == null || chore.completedAt is timestamp) &&
                 (chore.completedByUserId == null || chore.completedByUserId is string) &&
                 chore.pointValue is number;
        }
        
        // Members can read chores in their household
        allow read: if isSignedIn() && (isMember() || isOwner());
        
        // Members can create and update chores with validation
        allow create: if isSignedIn() && 
                       (isMember() || isOwner()) &&
                       request.resource.data.createdByUserId == request.auth.uid;
        
        allow update: if isSignedIn() && (isMember() || isOwner());
        
        // Delete permissions: household owners can delete any chore, members can delete chores they created or are assigned to
        allow delete: if isSignedIn() && (
          isOwner() || 
          (isMember() && request.auth.uid == resource.data.createdByUserId) ||
          (isMember() && request.auth.uid == resource.data.assignedToUserId)
        );
      }
    }
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
